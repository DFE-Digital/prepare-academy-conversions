name: Deploy to environment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: "Choose an environment to deploy to"
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.environment }}

env:
  DOCKER_IMAGE: a2bint-app
  NODE_VERSION: 18.x

jobs:
  set-env:
    name: Determine environment
    runs-on: ubuntu-22.04
    outputs:
      environment: ${{ steps.var.outputs.environment }}
      branch: ${{ steps.var.outputs.branch }}
      release: ${{ steps.var.outputs.release }}
      checked-out-sha: ${{ steps.var.outputs.checked-out-sha }}
      github_repository_lc: ${{ steps.var.outputs.github_repository_lc }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - id: var
        run: |
          GIT_REF=${{ github.ref }}
          GIT_BRANCH=${GIT_REF##*/}
          INPUT=${{ github.event.inputs.environment }}
          ENVIRONMENT=${INPUT:-"dev"}
          RELEASE=${ENVIRONMENT,,}-`date +%Y-%m-%d`.${{ github.run_number }}
          CHECKED_OUT_SHA="$(git log -1 '--format=format:%H')"
          GITHUB_REPOSITORY=${{ github.repository }}
          echo "environment=${ENVIRONMENT,,}" >> $GITHUB_OUTPUT
          echo "branch=$GIT_BRANCH" >> $GITHUB_OUTPUT
          echo "release=${RELEASE}" >> $GITHUB_OUTPUT
          echo "checked-out-sha=${CHECKED_OUT_SHA}" >> $GITHUB_OUTPUT
          echo "github_repository_lc=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

  build-and-push-image:
    name: Build and push to GHCR
    needs: set-env
    runs-on: ubuntu-22.04
    environment: ${{ needs.set-env.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: GitHub Container Registry login
        uses: docker/login-action@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io

      - name: Build and push docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          build-args: COMMIT_SHA=${{ needs.set-env.outputs.checked-out-sha }}
          secrets: github_token=${{ secrets.GITHUB_TOKEN }}
          tags: |
            ghcr.io/${{ needs.set-env.outputs.github_repository_lc }}:${{ needs.set-env.outputs.branch }}
            ghcr.io/${{ needs.set-env.outputs.github_repository_lc }}:${{ needs.set-env.outputs.release }}
            ghcr.io/${{ needs.set-env.outputs.github_repository_lc }}:sha-${{ needs.set-env.outputs.checked-out-sha }}
            ghcr.io/${{ needs.set-env.outputs.github_repository_lc }}:latest
          push: true

  create-tag:
    name: Tag and release
    needs: set-env
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Create tag
        run: |
          git tag ${{ needs.set-env.outputs.release }}
          git push origin ${{ needs.set-env.outputs.release }}

      - name: Create release
        uses: "actions/github-script@v7"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              await github.rest.repos.createRelease({
                draft: ${{ needs.set-env.outputs.environment == 'staging' }},
                generate_release_notes: true,
                name: "${{ needs.set-env.outputs.release }}",
                owner: context.repo.owner,
                prerelease: ${{ needs.set-env.outputs.environment == 'staging' }},
                repo: context.repo.repo,
                tag_name: "${{ needs.set-env.outputs.release }}",
              });
            } catch (error) {
              core.setFailed(error.message);
            }

  acr-import:
    name: Import images to ${{ needs.set-env.outputs.environment }} ACR
    needs: [ build-and-push-image, set-env ]
    runs-on: ubuntu-22.04
    environment: ${{ needs.set-env.outputs.environment }}
    steps:
      - name: Azure login with ACR credentials
        uses: azure/login@v2
        with:
          creds: ${{ secrets.ACR_CREDENTIALS }}

      - name: Run ACR Import
        uses: azure/cli@v2
        with:
          azcliversion: 2.45.0
          inlineScript: |
            TAGS=(
              ${{ needs.set-env.outputs.branch }}
              ${{ needs.set-env.outputs.release }}
              sha-${{ needs.set-env.outputs.checked-out-sha }}
              latest
            )
            az config set extension.use_dynamic_install=yes_without_prompt
            for tag in "${TAGS[@]}"
            do
              az acr import \
                --name ${{ secrets.ACR_NAME }} \
                --source "ghcr.io/${{ needs.set-env.outputs.github_repository_lc }}:$tag" \
                --image "${{ env.DOCKER_IMAGE }}:$tag" \
                --username ${{ github.actor }} \
                --password ${{ secrets.GITHUB_TOKEN }} \
                --force
            done

  deploy-image:
    name: Deploy to ${{ needs.set-env.outputs.environment }} (${{ needs.set-env.outputs.release }})
    needs: [ build-and-push-image, set-env, acr-import ]
    runs-on: ubuntu-22.04
    environment: ${{ needs.set-env.outputs.environment }}
    steps:
      - name: Azure login with ACA credentials
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_ACA_CREDENTIALS }}

      - name: Update Azure Container Apps Revision
        uses: azure/cli@v2
        with:
          azcliversion: 2.45.0
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt
            az containerapp update \
              --name ${{ secrets.AZURE_ACA_NAME }} \
              --resource-group ${{ secrets.AZURE_ACA_RESOURCE_GROUP }} \
              --image ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.DOCKER_IMAGE }}:${{ needs.set-env.outputs.release }} \
              --output none

  cypress-tests:
    name: Run Cypress Tests
    if: needs.set-env.outputs.environment == 'staging' || needs.set-env.outputs.environment == 'dev'
    needs: [ deploy-image, set-env ]
    runs-on: ubuntu-22.04
    environment: ${{ needs.set-env.outputs.environment }}
    defaults:
      run:
        working-directory: Dfe.PrepareConversions/Dfe.PrepareConversions.CypressTests
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Npm install
        run: npm install

      - name: Run cypress (staging)
        if: needs.set-env.outputs.environment == 'staging'
        run: npm run cy:run -- --env url='${{ secrets.AZURE_ENDPOINT }}',grep='-dao',cypressTestSecret='${{ secrets.CYPRESS_TEST_SECRET }}, academisationApiUrl=${{secrets.CYPRESS_ACADEMISATION_API_URL}}, academisationApiKey=${{ secrets.CYPRESS_ACADEMISATION_API_KEY}}'
        env:
          db: ${{ secrets.DB_CONNECTION_STRING }}

      - name: Run cypress (dev)
        if: needs.set-env.outputs.environment == 'dev'
        run: npm run cy:run -- --env url='${{ secrets.AZURE_ENDPOINT }}',cypressTestSecret='${{ secrets.CYPRESS_TEST_SECRET }}, academisationApiUrl=${{secrets.CYPRESS_ACADEMISATION_API_URL}}, academisationApiKey=${{ secrets.CYPRESS_ACADEMISATION_API_KEY}}'
        env:
          db: ${{ secrets.DB_CONNECTION_STRING }}

      - name: Upload screenshots
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ needs.set-env.outputs.environment }}
          path: Dfe.PrepareConversions/Dfe.PrepareConversions.CypressTests/cypress/screenshots

      - name: Generate report
        if: always()
        run: |
            mkdir mochareports
            npm run generate:html:report

      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ needs.set-env.outputs.environment }}
          path: Dfe.PrepareConversions/Dfe.PrepareConversions.CypressTests/mochareports

      - name: Report results
        if: always()
        run: npm run cy:notify -- --custom-text="Environment ${{ needs.set-env.outputs.environment }}, See more information https://github.com/DFE-Digital/prepare-academy-conversions/actions/runs/${{github.run_id}}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
